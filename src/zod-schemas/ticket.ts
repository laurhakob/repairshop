// developeri versian
// 
// import { createInsertSchema, createSelectSchema } from "drizzle-zod";
// import { tickets } from "@/db/schema";
// import { z } from "zod"

// export const insertTicketSchema = createInsertSchema(tickets, {
//     id: z.union([z.number(), z.literal("(New)")]),
//     title: (schema) => schema.title.min(1, "Title is required"),
//     description: (schema) => schema.description.min(1, "Description is required"),
//     tech: (schema) => schema.tech.email("Invalid email address"),
// })

// export const selectTicketSchema = createSelectSchema(tickets)

// export type insertTicketSchemaType = typeof insertTicketSchema._type

// export type selectTicketSchemaType = typeof selectTicketSchema._type 




//chat gbti versian, vor error chlini

import { z } from "zod";
import { createInsertSchema, createSelectSchema } from "drizzle-zod";
import { tickets } from "@/db/schema";

// Base schemas generated by drizzle-zod
const baseInsertSchema = createInsertSchema(tickets);
const baseSelectSchema = createSelectSchema(tickets);

// Enhanced schema with custom validations
export const insertTicketSchema = baseInsertSchema.extend({
  id: z.union([z.number(), z.literal("(New)")]),
  title: z.string().min(1, "Title is required"),
  description: z.string().min(1, "Description is required"),
  tech: z
    .string()
    .email("Invalid email address"), // Assuming tech is an email string
});

// Export the base select schema without additional validations
export const selectTicketSchema = baseSelectSchema;

// Types for the schemas
export type insertTicketSchemaType = z.infer<typeof insertTicketSchema>;
export type selectTicketSchemaType = z.infer<typeof selectTicketSchema>;
